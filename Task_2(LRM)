#PREDICTIVE MODELING WITH LINEAR REGRESSION
# Importing Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Generate synthetic data
data = {
    "Feature": np.random.rand(100) * 100,
    "Target": np.random.rand(100) * 50 + 10
}
df = pd.DataFrame(data)

# Prepare dataset
X = df[["Feature"]]
y = df["Target"]

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
print(f"R-Squared Score: {r2}")

# Visualization
plt.scatter(X_test, y_test, color='blue', label='Actual')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Predicted')
plt.xlabel("Feature")
plt.ylabel("Target")
plt.title("Linear Regression: Actual vs Predicted")
plt.legend()
plt.show()
